name: Build wheels

on:
  pull_request:
  push:
    tags:
      - '*'

env:
  MYPY_REPO: ${{ github.repository_owner }}/mypy

jobs:
  build_wheels:
    name: Build ${{ matrix.only }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            only: cp313-manylinux_x86_64
          - os: macos-latest
            only: cp313-macosx_arm64
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Checkout mypy
        shell: bash
        run: |
          git clone https://github.com/${{ env.MYPY_REPO }}.git
          git -C mypy checkout $(cat mypy_commit)

      - uses: pypa/cibuildwheel@v2.22.0
        with:
          config-file: cibuildwheel.toml
          package-dir: mypy
          only: ${{ matrix.only }}

      - uses: actions/upload-artifact@v4.6.0
        with:
          name: dist-${{ matrix.only }}
          path: ./wheelhouse/*.whl
          overwrite: true

  release:
    name: create release
    needs: [build_wheels]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: dist-*
          path: dist
          merge-multiple: true
      - name: Release
        uses: actions/github-script@v7
        if: ${{ github.event_name != 'pull_request' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // https://github.com/actions/upload-release-asset/issues/47
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;
            const tagName = process.env.GITHUB_REF.split("/").pop();

            console.log('environment', process.versions);
            console.log({ owner, repo, sha, tagName });

            const release = await github.rest.repos.createRelease({
              owner, repo,
              tag_name: tagName,
              target_commitish: sha,
              name: tagName
            });

            console.log('created release', { release });

            for (let file of await fs.readdir('dist')) {
              console.log('uploading', file);

              await github.rest.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./dist/${file}`)
              });
            }
