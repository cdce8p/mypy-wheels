name: Build wheels

on:
  workflow_dispatch:
    inputs:
      commit:
        description: Commit sha
        required: true
        type: string
  repository_dispatch:

env:
  REPO: ${{ github.repository_owner }}/mypy

jobs:
  build_wheels:
    name: Build ${{ matrix.only }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            only: cp310-manylinux_x86_64
          - os: ubuntu-latest
            only: cp311-manylinux_x86_64
          - os: macos-latest
            only: cp310-macosx_x86_64
          - os: macos-latest
            only: cp311-macosx_x86_64
    steps:
      - uses: actions/checkout@v3
      - name: Get commit sha
        id: get-sha
        run: |
          if [[ ${{ github.event_name }} == 'workflow_dispatch' ]]; then
            sha=${{ github.event.inputs.commit }}
          elif [[ ${{ github.event_name }} == 'repository_dispatch' ]]; then
            sha=${{ github.event.client_payload.commit }}
          fi
          echo "Commit: $sha"
          echo "commit=$sha" >> $GITHUB_OUTPUT
          exit 1
      - name: Checkout mypy
        shell: bash
        # use a commit hash checked into a file to get the mypy revision to build.
        # submodules prove problematic since .git is outside cibuildwheel's manylinux container
        run: |
          git clone https://github.com/${{ env.REPO }}.git
          git -C mypy checkout ${{ steps.get-sha.outputs.commit }}

      - uses: pypa/cibuildwheel@v2.11.1
        with:
          config-file: cibuildwheel.toml
          package-dir: mypy
          only: ${{ matrix.only }}

      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: ./wheelhouse/*.whl

  build_sdist_python_wheel:
    name: sdist and python wheel
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: "3.9"
      - name: Checkout mypy
        shell: bash
        run: |
          COMMIT=$(cat mypy_commit)
          git clone https://github.com/${{ env.REPO }}.git
          cd mypy
          git checkout $COMMIT
      - name: Run check-manifest
        run: |
          cd mypy
          pip install check-manifest
          check-manifest -v
      - name: Build sdist and wheel
        run: |
          cd mypy
          pip install --upgrade setuptools build
          python -m build
      - uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            mypy/dist/*.whl

  release:
    name: create release
    needs:
      - build_wheels
      - build_sdist_python_wheel
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Release
        if: ${{ github.event_name != 'pull_request' }}
        # https://github.com/actions/upload-release-asset/issues/47
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;

            console.log('environment', process.versions);
            console.log({ owner, repo, sha });

            const release = await github.rest.repos.createRelease({
              owner, repo,
              // if GITHUB_REF just appears to be a branch, use tag-{commit} as the tag
              tag_name: process.env.GITHUB_REF.includes("refs/heads/") ? "tag-" + sha : process.env.GITHUB_REF.split("/").pop(),
              target_commitish: sha
            });

            console.log('created release', { release });

            for (let file of await fs.readdir('dist')) {
              console.log('uploading', file);

              await github.rest.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./dist/${file}`)
              });
